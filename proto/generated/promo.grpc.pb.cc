// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: promo.proto

#include "promo.pb.h"
#include "promo.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace promo {

static const char* PromoService_method_names[] = {
  "/promo.PromoService/CreatePromoCode",
  "/promo.PromoService/UpdatePromoCode",
  "/promo.PromoService/DeletePromoCode",
  "/promo.PromoService/GetPromoCodeById",
  "/promo.PromoService/ListPromoCodes",
};

std::unique_ptr< PromoService::Stub> PromoService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PromoService::Stub> stub(new PromoService::Stub(channel, options));
  return stub;
}

PromoService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreatePromoCode_(PromoService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdatePromoCode_(PromoService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeletePromoCode_(PromoService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPromoCodeById_(PromoService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListPromoCodes_(PromoService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PromoService::Stub::CreatePromoCode(::grpc::ClientContext* context, const ::promo::CreatePromoCodeRequest& request, ::promo::PromoCode* response) {
  return ::grpc::internal::BlockingUnaryCall< ::promo::CreatePromoCodeRequest, ::promo::PromoCode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreatePromoCode_, context, request, response);
}

void PromoService::Stub::async::CreatePromoCode(::grpc::ClientContext* context, const ::promo::CreatePromoCodeRequest* request, ::promo::PromoCode* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::promo::CreatePromoCodeRequest, ::promo::PromoCode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreatePromoCode_, context, request, response, std::move(f));
}

void PromoService::Stub::async::CreatePromoCode(::grpc::ClientContext* context, const ::promo::CreatePromoCodeRequest* request, ::promo::PromoCode* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreatePromoCode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::promo::PromoCode>* PromoService::Stub::PrepareAsyncCreatePromoCodeRaw(::grpc::ClientContext* context, const ::promo::CreatePromoCodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::promo::PromoCode, ::promo::CreatePromoCodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreatePromoCode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::promo::PromoCode>* PromoService::Stub::AsyncCreatePromoCodeRaw(::grpc::ClientContext* context, const ::promo::CreatePromoCodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreatePromoCodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PromoService::Stub::UpdatePromoCode(::grpc::ClientContext* context, const ::promo::UpdatePromoCodeRequest& request, ::promo::PromoCode* response) {
  return ::grpc::internal::BlockingUnaryCall< ::promo::UpdatePromoCodeRequest, ::promo::PromoCode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdatePromoCode_, context, request, response);
}

void PromoService::Stub::async::UpdatePromoCode(::grpc::ClientContext* context, const ::promo::UpdatePromoCodeRequest* request, ::promo::PromoCode* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::promo::UpdatePromoCodeRequest, ::promo::PromoCode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdatePromoCode_, context, request, response, std::move(f));
}

void PromoService::Stub::async::UpdatePromoCode(::grpc::ClientContext* context, const ::promo::UpdatePromoCodeRequest* request, ::promo::PromoCode* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdatePromoCode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::promo::PromoCode>* PromoService::Stub::PrepareAsyncUpdatePromoCodeRaw(::grpc::ClientContext* context, const ::promo::UpdatePromoCodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::promo::PromoCode, ::promo::UpdatePromoCodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdatePromoCode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::promo::PromoCode>* PromoService::Stub::AsyncUpdatePromoCodeRaw(::grpc::ClientContext* context, const ::promo::UpdatePromoCodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdatePromoCodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PromoService::Stub::DeletePromoCode(::grpc::ClientContext* context, const ::promo::DeletePromoCodeRequest& request, ::promo::PromoCode* response) {
  return ::grpc::internal::BlockingUnaryCall< ::promo::DeletePromoCodeRequest, ::promo::PromoCode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeletePromoCode_, context, request, response);
}

void PromoService::Stub::async::DeletePromoCode(::grpc::ClientContext* context, const ::promo::DeletePromoCodeRequest* request, ::promo::PromoCode* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::promo::DeletePromoCodeRequest, ::promo::PromoCode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeletePromoCode_, context, request, response, std::move(f));
}

void PromoService::Stub::async::DeletePromoCode(::grpc::ClientContext* context, const ::promo::DeletePromoCodeRequest* request, ::promo::PromoCode* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeletePromoCode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::promo::PromoCode>* PromoService::Stub::PrepareAsyncDeletePromoCodeRaw(::grpc::ClientContext* context, const ::promo::DeletePromoCodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::promo::PromoCode, ::promo::DeletePromoCodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeletePromoCode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::promo::PromoCode>* PromoService::Stub::AsyncDeletePromoCodeRaw(::grpc::ClientContext* context, const ::promo::DeletePromoCodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeletePromoCodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PromoService::Stub::GetPromoCodeById(::grpc::ClientContext* context, const ::promo::GetPromoCodeRequest& request, ::promo::PromoCode* response) {
  return ::grpc::internal::BlockingUnaryCall< ::promo::GetPromoCodeRequest, ::promo::PromoCode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPromoCodeById_, context, request, response);
}

void PromoService::Stub::async::GetPromoCodeById(::grpc::ClientContext* context, const ::promo::GetPromoCodeRequest* request, ::promo::PromoCode* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::promo::GetPromoCodeRequest, ::promo::PromoCode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPromoCodeById_, context, request, response, std::move(f));
}

void PromoService::Stub::async::GetPromoCodeById(::grpc::ClientContext* context, const ::promo::GetPromoCodeRequest* request, ::promo::PromoCode* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPromoCodeById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::promo::PromoCode>* PromoService::Stub::PrepareAsyncGetPromoCodeByIdRaw(::grpc::ClientContext* context, const ::promo::GetPromoCodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::promo::PromoCode, ::promo::GetPromoCodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPromoCodeById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::promo::PromoCode>* PromoService::Stub::AsyncGetPromoCodeByIdRaw(::grpc::ClientContext* context, const ::promo::GetPromoCodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPromoCodeByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PromoService::Stub::ListPromoCodes(::grpc::ClientContext* context, const ::promo::ListPromoCodesRequest& request, ::promo::ListPromoCodesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::promo::ListPromoCodesRequest, ::promo::ListPromoCodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListPromoCodes_, context, request, response);
}

void PromoService::Stub::async::ListPromoCodes(::grpc::ClientContext* context, const ::promo::ListPromoCodesRequest* request, ::promo::ListPromoCodesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::promo::ListPromoCodesRequest, ::promo::ListPromoCodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListPromoCodes_, context, request, response, std::move(f));
}

void PromoService::Stub::async::ListPromoCodes(::grpc::ClientContext* context, const ::promo::ListPromoCodesRequest* request, ::promo::ListPromoCodesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListPromoCodes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::promo::ListPromoCodesResponse>* PromoService::Stub::PrepareAsyncListPromoCodesRaw(::grpc::ClientContext* context, const ::promo::ListPromoCodesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::promo::ListPromoCodesResponse, ::promo::ListPromoCodesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListPromoCodes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::promo::ListPromoCodesResponse>* PromoService::Stub::AsyncListPromoCodesRaw(::grpc::ClientContext* context, const ::promo::ListPromoCodesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListPromoCodesRaw(context, request, cq);
  result->StartCall();
  return result;
}

PromoService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PromoService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PromoService::Service, ::promo::CreatePromoCodeRequest, ::promo::PromoCode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PromoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::promo::CreatePromoCodeRequest* req,
             ::promo::PromoCode* resp) {
               return service->CreatePromoCode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PromoService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PromoService::Service, ::promo::UpdatePromoCodeRequest, ::promo::PromoCode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PromoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::promo::UpdatePromoCodeRequest* req,
             ::promo::PromoCode* resp) {
               return service->UpdatePromoCode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PromoService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PromoService::Service, ::promo::DeletePromoCodeRequest, ::promo::PromoCode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PromoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::promo::DeletePromoCodeRequest* req,
             ::promo::PromoCode* resp) {
               return service->DeletePromoCode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PromoService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PromoService::Service, ::promo::GetPromoCodeRequest, ::promo::PromoCode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PromoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::promo::GetPromoCodeRequest* req,
             ::promo::PromoCode* resp) {
               return service->GetPromoCodeById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PromoService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PromoService::Service, ::promo::ListPromoCodesRequest, ::promo::ListPromoCodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PromoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::promo::ListPromoCodesRequest* req,
             ::promo::ListPromoCodesResponse* resp) {
               return service->ListPromoCodes(ctx, req, resp);
             }, this)));
}

PromoService::Service::~Service() {
}

::grpc::Status PromoService::Service::CreatePromoCode(::grpc::ServerContext* context, const ::promo::CreatePromoCodeRequest* request, ::promo::PromoCode* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PromoService::Service::UpdatePromoCode(::grpc::ServerContext* context, const ::promo::UpdatePromoCodeRequest* request, ::promo::PromoCode* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PromoService::Service::DeletePromoCode(::grpc::ServerContext* context, const ::promo::DeletePromoCodeRequest* request, ::promo::PromoCode* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PromoService::Service::GetPromoCodeById(::grpc::ServerContext* context, const ::promo::GetPromoCodeRequest* request, ::promo::PromoCode* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PromoService::Service::ListPromoCodes(::grpc::ServerContext* context, const ::promo::ListPromoCodesRequest* request, ::promo::ListPromoCodesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace promo

